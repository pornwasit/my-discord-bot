const { Client, GatewayIntentBits } = require('discord.js');
const express = require('express');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Express server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Render ‡∏ó‡∏≥‡πÉ‡∏´‡πâ sleep
const app = express();
const PORT = process.env.PORT || 3000;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Discord Client
const client = new Client({ 
    intents: [
        GatewayIntentBits.Guilds, 
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ] 
});

// ===== EXPRESS SERVER SETUP (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render) =====
app.get('/', (req, res) => {
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const seconds = Math.floor(uptime % 60);
    
    res.json({
        status: 'Bot is running! ü§ñ',
        uptime: `${hours}h ${minutes}m ${seconds}s`,
        botStatus: client.user ? `${client.user.username} is online` : 'Bot is starting...',
        servers: client.guilds ? client.guilds.cache.size : 0,
        timestamp: new Date().toISOString()
    });
});

app.get('/health', (req, res) => {
    res.json({ 
        status: 'healthy',
        bot: client.user ? 'online' : 'offline',
        timestamp: new Date().toISOString()
    });
});

app.get('/ping', (req, res) => {
    res.json({ 
        message: 'pong',
        latency: client.ws.ping || 'N/A',
        timestamp: new Date().toISOString()
    });
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Express server
app.listen(PORT, () => {
    console.log(`üåê Express server running on port ${PORT}`);
    console.log(`üì° Health check available at: http://localhost:${PORT}/health`);
});

// ===== KEEP ALIVE SYSTEM =====
function keepAlive() {
    const appUrl = process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`;
    
    setInterval(async () => {
        try {
            const response = await fetch(`${appUrl}/health`);
            const data = await response.json();
            console.log(`üîÑ Keep-alive ping: ${data.status} at ${new Date().toLocaleTimeString('th-TH')}`);
        } catch (error) {
            console.log(`‚ùå Keep-alive ping failed: ${error.message}`);
        }
    }, 14 * 60 * 1000); // Ping ‡∏ó‡∏∏‡∏Å 14 ‡∏ô‡∏≤‡∏ó‡∏µ
}

// ===== DISCORD BOT CODE =====
// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
client.once('ready', () => {
    console.log(`‚úÖ ${client.user.tag} is online!`);
    console.log(`üìä Serving ${client.guilds.cache.size} servers`);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
    client.user.setActivity('‡∏û‡∏¥‡∏°‡∏û‡πå !help ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ | Hosted on Render', { 
        type: 'WATCHING' 
    });
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏° keep-alive system ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
    keepAlive();
    console.log('üîÑ Keep-alive system started');
});

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
client.on('messageCreate', message => {
    // ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    if (message.author.bot) return;
    
    const content = message.content.toLowerCase();
    
    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
    if (content === '!hello' || content === '!hi') {
        message.reply('üôè ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì');
    }
    
    else if (content === '!help') {
        const helpEmbed = {
            color: 0x0099FF,
            title: 'üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ',
            description: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:',
            fields: [
                {
                    name: '!hello, !hi',
                    value: '‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ö‡∏≠‡∏ó',
                    inline: true
                },
                {
                    name: '!ping',
                    value: '‡πÄ‡∏ä‡πá‡∏Ñ ping ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó',
                    inline: true
                },
                {
                    name: '!uptime',
                    value: '‡∏î‡∏π‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô‡∏°‡∏≤',
                    inline: true
                },
                {
                    name: '!time',
                    value: '‡∏î‡∏π‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
                    inline: true
                },
                {
                    name: '!server',
                    value: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
                    inline: true
                },
                {
                    name: '!user',
                    value: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
                    inline: true
                },
                {
                    name: '!joke',
                    value: '‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏•‡∏Å',
                    inline: true
                },
                {
                    name: '!status',
                    value: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó',
                    inline: true
                }
            ],
            timestamp: new Date(),
            footer: {
                text: 'Hosted on Render.com üöÄ | Keep-Alive System Active'
            }
        };
        message.reply({ embeds: [helpEmbed] });
    }
    
    else if (content === '!ping') {
        const sent = Date.now();
        message.reply('üèì ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ ping...').then(sentMessage => {
            const timeDiff = Date.now() - sent;
            sentMessage.edit(`üèì Pong! \`${timeDiff}ms\` | API Latency: \`${Math.round(client.ws.ping)}ms\``);
        });
    }
    
    else if (content === '!uptime') {
        const uptime = process.uptime();
        const days = Math.floor(uptime / 86400);
        const hours = Math.floor((uptime % 86400) / 3600);
        const minutes = Math.floor((uptime % 3600) / 60);
        const seconds = Math.floor(uptime % 60);
        
        let uptimeString = '';
        if (days > 0) uptimeString += `${days} ‡∏ß‡∏±‡∏ô `;
        if (hours > 0) uptimeString += `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á `;
        if (minutes > 0) uptimeString += `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ `;
        uptimeString += `${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
        
        message.reply(`‚è∞ ‡∏ö‡∏≠‡∏ó‡∏£‡∏±‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß: **${uptimeString}**\nüîÑ Keep-Alive System: **Active**`);
    }
    
    else if (content === '!status') {
        const statusEmbed = {
            color: 0x00FF00,
            title: 'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó',
            fields: [
                {
                    name: 'ü§ñ ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó',
                    value: client.user.username,
                    inline: true
                },
                {
                    name: 'üîó ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
                    value: '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå üü¢',
                    inline: true
                },
                {
                    name: 'üì° Ping',
                    value: `${Math.round(client.ws.ping)}ms`,
                    inline: true
                },
                {
                    name: 'üè† ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
                    value: `${client.guilds.cache.size} ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå`,
                    inline: true
                },
                {
                    name: 'üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
                    value: `${client.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0)} ‡∏Ñ‡∏ô`,
                    inline: true
                },
                {
                    name: 'üöÄ Host',
                    value: 'Render.com',
                    inline: true
                }
            ],
            timestamp: new Date(),
            footer: {
                text: '‡∏£‡∏∞‡∏ö‡∏ö Keep-Alive ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà üîÑ'
            }
        };
        message.reply({ embeds: [statusEmbed] });
    }
    
    else if (content === '!time') {
        const now = new Date();
        const thaiTime = now.toLocaleString('th-TH', {
            timeZone: 'Asia/Bangkok',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        message.reply(`üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **${thaiTime}**`);
    }
    
    else if (content === '!server') {
        const guild = message.guild;
        if (guild) {
            const serverEmbed = {
                color: 0x00FF00,
                title: `üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${guild.name}`,
                thumbnail: {
                    url: guild.iconURL()
                },
                fields: [
                    {
                        name: 'üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
                        value: `${guild.memberCount} ‡∏Ñ‡∏ô`,
                        inline: true
                    },
                    {
                        name: 'üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠',
                        value: guild.createdAt.toLocaleDateString('th-TH'),
                        inline: true
                    },
                    {
                        name: 'üëë ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á',
                        value: `<@${guild.ownerId}>`,
                        inline: true
                    }
                ]
            };
            message.reply({ embeds: [serverEmbed] });
        }
    }
    
    else if (content === '!user') {
        const user = message.author;
        const member = message.member;
        
        const userEmbed = {
            color: 0xFF0000,
            title: `üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ`,
            thumbnail: {
                url: user.displayAvatarURL()
            },
            fields: [
                {
                    name: 'üìõ ‡∏ä‡∏∑‡πà‡∏≠',
                    value: user.username,
                    inline: true
                },
                {
                    name: 'üè∑Ô∏è Tag',
                    value: user.tag,
                    inline: true
                },
                {
                    name: 'üÜî ID',
                    value: user.id,
                    inline: true
                },
                {
                    name: 'üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠',
                    value: user.createdAt.toLocaleDateString('th-TH'),
                    inline: true
                }
            ]
        };
        
        if (member) {
            userEmbed.fields.push({
                name: 'üì• ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠',
                value: member.joinedAt.toLocaleDateString('th-TH'),
                inline: true
            });
        }
        
        message.reply({ embeds: [userEmbed] });
    }
    
    else if (content === '!joke') {
        const jokes = [
            '‡∏ó‡∏≥‡πÑ‡∏°‡∏ú‡∏µ‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏¥‡∏ô KFC? ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏•‡∏±‡∏ß‡∏û‡∏±‡∏ô‡πÄ‡∏≠‡∏Å! üëª',
            '‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ 4 ‡∏Ç‡∏≤ ‡πÅ‡∏ï‡πà‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ? ‡πÇ‡∏ï‡πä‡∏∞! ü™ë',
            '‡∏ó‡∏≥‡πÑ‡∏°‡πÄ‡∏™‡∏∑‡∏≠‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô? ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏•‡∏±‡∏ß‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏™‡∏∑‡∏≠! üêÖ',
            '‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡πà‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏Å‡∏õ‡∏£‡∏Å? ‡∏ô‡πâ‡∏≥! üíß',
            '‡∏ó‡∏≥‡πÑ‡∏°‡∏ä‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå? ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏•‡∏±‡∏ß‡πÄ‡∏°‡∏≤‡∏™‡πå! üêò',
            '‡∏ó‡∏≥‡πÑ‡∏°‡∏õ‡∏•‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏•‡πà‡∏ô‡∏ö‡∏≤‡∏™? ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏•‡∏±‡∏ß‡πÅ‡∏ü‡∏ô(‡∏õ‡∏•‡∏≤)! üêü',
            '‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ? ‡∏Ç‡πâ‡∏≤‡∏ß! üçö'
        ];
        
        const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
        message.reply(`üòÇ ${randomJoke}`);
    }
    
    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ö‡∏≠‡∏ó"
    else if (content.includes('‡∏ö‡∏≠‡∏ó')) {
        const responses = [
            '‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ü§ñ',
            '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? üòä',
            '‡∏ú‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! ‚úã',
            '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö! üéØ'
        ];
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        message.reply(randomResponse);
    }
});

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error
client.on('error', error => {
    console.error('‚ùå Discord client error:', error);
});

client.on('disconnect', () => {
    console.log('‚ö†Ô∏è Bot disconnected, attempting to reconnect...');
});

client.on('reconnecting', () => {
    console.log('üîÑ Bot reconnecting...');
});

process.on('unhandledRejection', error => {
    console.error('‚ùå Unhandled promise rejection:', error);
});

// ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
process.on('SIGINT', () => {
    console.log('üõë Bot is shutting down...');
    client.destroy();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('üõë Bot is being terminated...');
    client.destroy();
    process.exit(0);
});

// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Token
const token = process.env.DISCORD_TOKEN;
if (!token) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DISCORD_TOKEN ‡πÉ‡∏ô environment variables');
    process.exit(1);
}

console.log('üöÄ Starting Discord bot with Keep-Alive system...');
console.log('üåê Express server will start on port', PORT);

client.login(token).catch(error => {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ:', error);
    process.exit(1);
});