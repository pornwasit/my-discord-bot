const { Client, GatewayIntentBits, ActivityType } = require('discord.js');
const express = require('express');
const config = require('./config.json');

// Express Server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Keep-Alive
const app = express();
const PORT = process.env.PORT || 3000;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Discord Client ‡∏û‡∏£‡πâ‡∏≠‡∏° intents ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildPresences
    ],
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    presence: {
        activities: [{
            name: config.status || '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå 24/7',
            type: ActivityType.Watching
        }],
        status: 'online'
    }
});

// ===== EXPRESS SETUP (Keep-Alive System) =====
app.use(express.json());

app.get('/', (req, res) => {
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const seconds = Math.floor(uptime % 60);
    
    res.json({
        status: 'Bot Online! üü¢',
        uptime: `${hours}h ${minutes}m ${seconds}s`,
        bot: client.user ? {
            name: client.user.username,
            id: client.user.id,
            status: 'Online'
        } : 'Starting...',
        guilds: client.guilds.cache.size,
        users: client.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0),
        ping: client.ws.ping || 'N/A',
        timestamp: new Date().toISOString()
    });
});

app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        bot: client.user ? 'online' : 'offline',
        ping: client.ws.ping || 'N/A',
        timestamp: new Date().toISOString()
    });
});

app.get('/restart', (req, res) => {
    res.json({ message: 'Restarting bot...' });
    setTimeout(() => {
        process.exit(0);
    }, 1000);
});

const server = app.listen(PORT, () => {
    console.log(`üåê Keep-Alive server running on port ${PORT}`);
});

// ===== KEEP-ALIVE SYSTEM =====
function startKeepAlive() {
    const pingInterval = 13 * 60 * 1000; // 13 ‡∏ô‡∏≤‡∏ó‡∏µ
    const appUrl = process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`;
    
    setInterval(async () => {
        try {
            const response = await fetch(`${appUrl}/health`);
            const data = await response.json();
            console.log(`üîÑ Keep-alive: ${data.status} | Ping: ${client.ws.ping}ms | ${new Date().toLocaleTimeString('th-TH')}`);
        } catch (error) {
            console.log(`‚ö†Ô∏è Keep-alive failed: ${error.message}`);
            // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ http module ‡πÅ‡∏ó‡∏ô
            const http = require('http');
            http.get(`${appUrl}/health`, (res) => {
                console.log(`üîÑ Backup keep-alive successful`);
            }).on('error', () => {
                console.log(`‚ùå All keep-alive methods failed`);
            });
        }
    }, pingInterval);
    
    console.log('üîÑ Keep-alive system started (every 13 minutes)');
}

// ===== AUTO-RECONNECT SYSTEM =====
let reconnectAttempts = 0;
const maxReconnectAttempts = 5;

function handleReconnect() {
    if (reconnectAttempts < maxReconnectAttempts) {
        reconnectAttempts++;
        console.log(`üîÑ Attempting to reconnect... (${reconnectAttempts}/${maxReconnectAttempts})`);
        
        setTimeout(() => {
            client.login(process.env.DISCORD_TOKEN || config.token).catch(error => {
                console.error(`‚ùå Reconnect attempt ${reconnectAttempts} failed:`, error.message);
                if (reconnectAttempts >= maxReconnectAttempts) {
                    console.log('üíÄ Max reconnect attempts reached. Restarting process...');
                    process.exit(1);
                } else {
                    handleReconnect();
                }
            });
        }, 5000 * reconnectAttempts); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á
    }
}

// ===== DISCORD BOT EVENTS =====
client.once('ready', () => {
    console.log('\nüéâ ===== BOT SUCCESSFULLY STARTED =====');
    console.log(`‚úÖ Bot: ${client.user.tag}`);
    console.log(`üìä Guilds: ${client.guilds.cache.size}`);
    console.log(`üë• Users: ${client.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0)}`);
    console.log(`üèì Ping: ${client.ws.ping}ms`);
    console.log('=====================================\n');
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö reconnect
    reconnectAttempts = 0;
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    client.user.setPresence({
        activities: [{
            name: config.status || '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå 24/7 | !help',
            type: ActivityType.Watching
        }],
        status: 'online'
    });
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏° keep-alive system
    startKeepAlive();
});

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
client.on('reconnecting', () => {
    console.log('üîÑ Reconnecting to Discord...');
});

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
client.on('resumed', () => {
    console.log('‚úÖ Successfully resumed connection!');
    reconnectAttempts = 0;
});

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ disconnect
client.on('disconnect', () => {
    console.log('‚ö†Ô∏è Bot disconnected from Discord');
    handleReconnect();
});

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
client.on('error', error => {
    console.error('‚ùå Discord client error:', error);
    if (error.code === 'TOKEN_INVALID') {
        console.error('üíÄ Invalid token! Please check your DISCORD_TOKEN');
        process.exit(1);
    }
});

client.on('warn', info => {
    console.warn('‚ö†Ô∏è Discord warning:', info);
});

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ rate limit
client.on('rateLimit', (info) => {
    console.log(`‚è±Ô∏è Rate limited: ${info.method} ${info.path} - ${info.timeout}ms`);
});

// ===== MESSAGE HANDLING =====
client.on('messageCreate', async (message) => {
    // ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó‡∏≠‡∏∑‡πà‡∏ô
    if (message.author.bot) return;
    
    const content = message.content.toLowerCase();
    const prefix = config.prefix || '!';
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ prefix ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!content.startsWith(prefix)) {
        // ‡∏ï‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏≠‡πà‡∏¢‡∏ñ‡∏∂‡∏á‡∏ö‡∏≠‡∏ó
        if (content.includes('‡∏ö‡∏≠‡∏ó') || content.includes('bot')) {
            const responses = config.autoReply || [
                '‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ü§ñ',
                '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?',
                '‡∏ú‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! ‚úã'
            ];
            const randomResponse = responses[Math.floor(Math.random() * responses.length)];
            return message.reply(randomResponse);
        }
        return;
    }
    
    // ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å prefix
    const args = content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();
    
    try {
        // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        switch (command) {
            case 'ping':
                const sent = Date.now();
                const msg = await message.reply('üèì ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ ping...');
                const timeDiff = Date.now() - sent;
                await msg.edit(`üèì Pong!\nüì∂ Latency: \`${timeDiff}ms\`\nüíì API Ping: \`${Math.round(client.ws.ping)}ms\``);
                break;
                
            case 'uptime':
                const uptime = process.uptime();
                const days = Math.floor(uptime / 86400);
                const hours = Math.floor((uptime % 86400) / 3600);
                const minutes = Math.floor((uptime % 3600) / 60);
                const seconds = Math.floor(uptime % 60);
                
                let uptimeString = '';
                if (days > 0) uptimeString += `${days} ‡∏ß‡∏±‡∏ô `;
                if (hours > 0) uptimeString += `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á `;
                if (minutes > 0) uptimeString += `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ `;
                uptimeString += `${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
                
                await message.reply(`‚è∞ **‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß:** ${uptimeString}\nüîÑ **Keep-Alive:** Active\nüü¢ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** Online`);
                break;
                
            case 'status':
                const statusEmbed = {
                    color: 0x00FF00,
                    title: 'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó',
                    fields: [
                        {
                            name: 'ü§ñ ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó',
                            value: client.user.username,
                            inline: true
                        },
                        {
                            name: 'üü¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
                            value: '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
                            inline: true
                        },
                        {
                            name: 'üì° Ping',
                            value: `${Math.round(client.ws.ping)}ms`,
                            inline: true
                        },
                        {
                            name: 'üè† ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
                            value: `${client.guilds.cache.size} ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå`,
                            inline: true
                        },
                        {
                            name: 'üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
                            value: `${client.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0)} ‡∏Ñ‡∏ô`,
                            inline: true
                        },
                        {
                            name: 'üöÄ Host',
                            value: 'Render.com',
                            inline: true
                        }
                    ],
                    timestamp: new Date(),
                    footer: {
                        text: '24/7 Online ‚Ä¢ Keep-Alive Active'
                    }
                };
                await message.reply({ embeds: [statusEmbed] });
                break;
                
            case 'help':
                const helpEmbed = {
                    color: 0x0099FF,
                    title: 'üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ',
                    description: `‡πÉ‡∏ä‡πâ prefix: \`${prefix}\``,
                    fields: [
                        {
                            name: `${prefix}ping`,
                            value: '‡πÄ‡∏ä‡πá‡∏Ñ ping ‡πÅ‡∏•‡∏∞ latency',
                            inline: true
                        },
                        {
                            name: `${prefix}uptime`,
                            value: '‡∏î‡∏π‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
                            inline: true
                        },
                        {
                            name: `${prefix}status`,
                            value: '‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó',
                            inline: true
                        },
                        {
                            name: `${prefix}server`,
                            value: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
                            inline: true
                        },
                        {
                            name: `${prefix}user`,
                            value: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
                            inline: true
                        },
                        {
                            name: `${prefix}restart`,
                            value: '‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Owner)',
                            inline: true
                        }
                    ],
                    timestamp: new Date(),
                    footer: {
                        text: '‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå 24/7 | Hosted on Render'
                    }
                };
                await message.reply({ embeds: [helpEmbed] });
                break;
                
            case 'server':
                if (!message.guild) return message.reply('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
                
                const guild = message.guild;
                const serverEmbed = {
                    color: 0x00FF00,
                    title: `üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${guild.name}`,
                    thumbnail: {
                        url: guild.iconURL() || null
                    },
                    fields: [
                        {
                            name: 'üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
                            value: `${guild.memberCount} ‡∏Ñ‡∏ô`,
                            inline: true
                        },
                        {
                            name: 'üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠',
                            value: guild.createdAt.toLocaleDateString('th-TH'),
                            inline: true
                        },
                        {
                            name: 'üëë ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á',
                            value: `<@${guild.ownerId}>`,
                            inline: true
                        }
                    ]
                };
                await message.reply({ embeds: [serverEmbed] });
                break;
                
            case 'user':
                const user = message.author;
                const member = message.member;
                
                const userEmbed = {
                    color: 0xFF0000,
                    title: 'üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
                    thumbnail: {
                        url: user.displayAvatarURL()
                    },
                    fields: [
                        {
                            name: 'üìõ ‡∏ä‡∏∑‡πà‡∏≠',
                            value: user.username,
                            inline: true
                        },
                        {
                            name: 'üè∑Ô∏è Tag',
                            value: user.tag,
                            inline: true
                        },
                        {
                            name: 'üÜî ID',
                            value: user.id,
                            inline: true
                        },
                        {
                            name: 'üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠',
                            value: user.createdAt.toLocaleDateString('th-TH'),
                            inline: true
                        }
                    ]
                };
                
                if (member && member.joinedAt) {
                    userEmbed.fields.push({
                        name: 'üì• ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠',
                        value: member.joinedAt.toLocaleDateString('th-TH'),
                        inline: true
                    });
                }
                
                await message.reply({ embeds: [userEmbed] });
                break;
                
            case 'restart':
                // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ owner ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                const ownerIds = config.owners || [];
                if (!ownerIds.includes(message.author.id)) {
                    return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
                }
                
                await message.reply('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó...');
                console.log(`üîÑ Bot restart requested by ${message.author.tag}`);
                setTimeout(() => {
                    process.exit(0);
                }, 2000);
                break;
                
            default:
                // ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô config
                if (config.commands && config.commands[command]) {
                    const cmd = config.commands[command];
                    await message.reply(cmd.response || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö');
                }
                break;
        }
    } catch (error) {
        console.error(`‚ùå Error handling command "${command}":`, error);
        await message.reply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á').catch(() => {});
    }
});

// ===== PROCESS HANDLERS =====
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    process.exit(1);
});

process.on('SIGINT', () => {
    console.log('\nüõë Shutting down bot gracefully...');
    client.destroy();
    server.close();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë Received SIGTERM, shutting down gracefully...');
    client.destroy();
    server.close();
    process.exit(0);
});

// ===== START BOT =====
const token = process.env.DISCORD_TOKEN || config.token;
if (!token) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DISCORD_TOKEN ‡πÉ‡∏ô environment variables ‡∏´‡∏£‡∏∑‡∏≠ config.json');
    process.exit(1);
}

console.log('üöÄ Starting stable Discord bot...');
console.log(`üåê Keep-alive server will run on port ${PORT}`);

client.login(token).catch(error => {
    console.error('‚ùå Failed to login:', error);
    process.exit(1);
});
